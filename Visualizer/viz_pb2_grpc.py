# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import viz_pb2 as viz__pb2


class Momentum22VizStub(object):
    """
    Service to connect the Momentum 22 Python Visualization to student code
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetLandingStatus = channel.unary_unary(
                '/Momentum22Viz/SetLandingStatus',
                request_serializer=viz__pb2.LandingNotification.SerializeToString,
                response_deserializer=viz__pb2.ReqAck.FromString,
                )
        self.SetTakeoffStatus = channel.unary_unary(
                '/Momentum22Viz/SetTakeoffStatus',
                request_serializer=viz__pb2.TakeoffNotification.SerializeToString,
                response_deserializer=viz__pb2.ReqAck.FromString,
                )
        self.SetDroneLocation = channel.unary_unary(
                '/Momentum22Viz/SetDroneLocation',
                request_serializer=viz__pb2.Location.SerializeToString,
                response_deserializer=viz__pb2.ReqAck.FromString,
                )


class Momentum22VizServicer(object):
    """
    Service to connect the Momentum 22 Python Visualization to student code
    """

    def SetLandingStatus(self, request, context):
        """
        Client: Student code
        Server: Visualization
        Sets the landing status in the visualization based on observations in student code
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTakeoffStatus(self, request, context):
        """
        Client: Student code
        Server: Visualization
        Sets the take off status in the visualization based on observations in student code
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDroneLocation(self, request, context):
        """
        Client: Student Code
        Server: Visualization
        Sets the drone's position in the visualization based on observations in student code
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Momentum22VizServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetLandingStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLandingStatus,
                    request_deserializer=viz__pb2.LandingNotification.FromString,
                    response_serializer=viz__pb2.ReqAck.SerializeToString,
            ),
            'SetTakeoffStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTakeoffStatus,
                    request_deserializer=viz__pb2.TakeoffNotification.FromString,
                    response_serializer=viz__pb2.ReqAck.SerializeToString,
            ),
            'SetDroneLocation': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDroneLocation,
                    request_deserializer=viz__pb2.Location.FromString,
                    response_serializer=viz__pb2.ReqAck.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Momentum22Viz', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Momentum22Viz(object):
    """
    Service to connect the Momentum 22 Python Visualization to student code
    """

    @staticmethod
    def SetLandingStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Momentum22Viz/SetLandingStatus',
            viz__pb2.LandingNotification.SerializeToString,
            viz__pb2.ReqAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetTakeoffStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Momentum22Viz/SetTakeoffStatus',
            viz__pb2.TakeoffNotification.SerializeToString,
            viz__pb2.ReqAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetDroneLocation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Momentum22Viz/SetDroneLocation',
            viz__pb2.Location.SerializeToString,
            viz__pb2.ReqAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
